#include <fstream>
#include <getopt.h>
#include <iostream>
#include <stdio.h>
#include <stdlib.h>
#include <string>

using namespace std;

const unsigned char Sbox[256] = {
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b,
    0xfe, 0xd7, 0xab, 0x76, 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0,
    0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0, 0xb7, 0xfd, 0x93, 0x26,
    0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2,
    0xeb, 0x27, 0xb2, 0x75, 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0,
    0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84, 0x53, 0xd1, 0x00, 0xed,
    0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f,
    0x50, 0x3c, 0x9f, 0xa8, 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5,
    0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2, 0xcd, 0x0c, 0x13, 0xec,
    0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14,
    0xde, 0x5e, 0x0b, 0xdb, 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c,
    0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79, 0xe7, 0xc8, 0x37, 0x6d,
    0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f,
    0x4b, 0xbd, 0x8b, 0x8a, 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e,
    0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e, 0xe1, 0xf8, 0x98, 0x11,
    0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f,
    0xb0, 0x54, 0xbb, 0x16};

const unsigned char ISbox[256] = {
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e,
    0x81, 0xf3, 0xd7, 0xfb, 0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87,
    0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb, 0x54, 0x7b, 0x94, 0x32,
    0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49,
    0x6d, 0x8b, 0xd1, 0x25, 0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16,
    0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92, 0x6c, 0x70, 0x48, 0x50,
    0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05,
    0xb8, 0xb3, 0x45, 0x06, 0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02,
    0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b, 0x3a, 0x91, 0x11, 0x41,
    0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8,
    0x1c, 0x75, 0xdf, 0x6e, 0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89,
    0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b, 0xfc, 0x56, 0x3e, 0x4b,
    0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59,
    0x27, 0x80, 0xec, 0x5f, 0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d,
    0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef, 0xa0, 0xe0, 0x3b, 0x4d,
    0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63,
    0x55, 0x21, 0x0c, 0x7d};

const unsigned char Ebox[257] = {
    0x01, 0x03, 0x05, 0x0F, 0x11, 0x33, 0x55, 0xFF, 0x1A, 0x2E, 0x72, 0x96,
    0xA1, 0xF8, 0x13, 0x35, 0x5F, 0xE1, 0x38, 0x48, 0xD8, 0x73, 0x95, 0xA4,
    0xF7, 0x02, 0x06, 0x0A, 0x1E, 0x22, 0x66, 0xAA, 0xE5, 0x34, 0x5C, 0xE4,
    0x37, 0x59, 0xEB, 0x26, 0x6A, 0xBE, 0xD9, 0x70, 0x90, 0xAB, 0xE6, 0x31,
    0x53, 0xF5, 0x04, 0x0C, 0x14, 0x3C, 0x44, 0xCC, 0x4F, 0xD1, 0x68, 0xB8,
    0xD3, 0x6E, 0xB2, 0xCD, 0x4C, 0xD4, 0x67, 0xA9, 0xE0, 0x3B, 0x4D, 0xD7,
    0x62, 0xA6, 0xF1, 0x08, 0x18, 0x28, 0x78, 0x88, 0x83, 0x9E, 0xB9, 0xD0,
    0x6B, 0xBD, 0xDC, 0x7F, 0x81, 0x98, 0xB3, 0xCE, 0x49, 0xDB, 0x76, 0x9A,
    0xB5, 0xC4, 0x57, 0xF9, 0x10, 0x30, 0x50, 0xF0, 0x0B, 0x1D, 0x27, 0x69,
    0xBB, 0xD6, 0x61, 0xA3, 0xFE, 0x19, 0x2B, 0x7D, 0x87, 0x92, 0xAD, 0xEC,
    0x2F, 0x71, 0x93, 0xAE, 0xE9, 0x20, 0x60, 0xA0, 0xFB, 0x16, 0x3A, 0x4E,
    0xD2, 0x6D, 0xB7, 0xC2, 0x5D, 0xE7, 0x32, 0x56, 0xFA, 0x15, 0x3F, 0x41,
    0xC3, 0x5E, 0xE2, 0x3D, 0x47, 0xC9, 0x40, 0xC0, 0x5B, 0xED, 0x2C, 0x74,
    0x9C, 0xBF, 0xDA, 0x75, 0x9F, 0xBA, 0xD5, 0x64, 0xAC, 0xEF, 0x2A, 0x7E,
    0x82, 0x9D, 0xBC, 0xDF, 0x7A, 0x8E, 0x89, 0x80, 0x9B, 0xB6, 0xC1, 0x58,
    0xE8, 0x23, 0x65, 0xAF, 0xEA, 0x25, 0x6F, 0xB1, 0xC8, 0x43, 0xC5, 0x54,
    0xFC, 0x1F, 0x21, 0x63, 0xA5, 0xF4, 0x07, 0x09, 0x1B, 0x2D, 0x77, 0x99,
    0xB0, 0xCB, 0x46, 0xCA, 0x45, 0xCF, 0x4A, 0xDE, 0x79, 0x8B, 0x86, 0x91,
    0xA8, 0xE3, 0x3E, 0x42, 0xC6, 0x51, 0xF3, 0x0E, 0x12, 0x36, 0x5A, 0xEE,
    0x29, 0x7B, 0x8D, 0x8C, 0x8F, 0x8A, 0x85, 0x94, 0xA7, 0xF2, 0x0D, 0x17,
    0x39, 0x4B, 0xDD, 0x7C, 0x84, 0x97, 0xA2, 0xFD, 0x1C, 0x24, 0x6C, 0xB4,
    0xC7, 0x52, 0xF6, 0x01, 0x00};

const unsigned char Lbox[256] = {
    0x00, 0x00, 0x19, 0x01, 0x32, 0x02, 0x1A, 0xC6, 0x4B, 0xC7, 0x1B, 0x68,
    0x33, 0xEE, 0xDF, 0x03, 0x64, 0x04, 0xE0, 0x0E, 0x34, 0x8D, 0x81, 0xEF,
    0x4C, 0x71, 0x08, 0xC8, 0xF8, 0x69, 0x1C, 0xC1, 0x7D, 0xC2, 0x1D, 0xB5,
    0xF9, 0xB9, 0x27, 0x6A, 0x4D, 0xE4, 0xA6, 0x72, 0x9A, 0xC9, 0x09, 0x78,
    0x65, 0x2F, 0x8A, 0x05, 0x21, 0x0F, 0xE1, 0x24, 0x12, 0xF0, 0x82, 0x45,
    0x35, 0x93, 0xDA, 0x8E, 0x96, 0x8F, 0xDB, 0xBD, 0x36, 0xD0, 0xCE, 0x94,
    0x13, 0x5C, 0xD2, 0xF1, 0x40, 0x46, 0x83, 0x38, 0x66, 0xDD, 0xFD, 0x30,
    0xBF, 0x06, 0x8B, 0x62, 0xB3, 0x25, 0xE2, 0x98, 0x22, 0x88, 0x91, 0x10,
    0x7E, 0x6E, 0x48, 0xC3, 0xA3, 0xB6, 0x1E, 0x42, 0x3A, 0x6B, 0x28, 0x54,
    0xFA, 0x85, 0x3D, 0xBA, 0x2B, 0x79, 0x0A, 0x15, 0x9B, 0x9F, 0x5E, 0xCA,
    0x4E, 0xD4, 0xAC, 0xE5, 0xF3, 0x73, 0xA7, 0x57, 0xAF, 0x58, 0xA8, 0x50,
    0xF4, 0xEA, 0xD6, 0x74, 0x4F, 0xAE, 0xE9, 0xD5, 0xE7, 0xE6, 0xAD, 0xE8,
    0x2C, 0xD7, 0x75, 0x7A, 0xEB, 0x16, 0x0B, 0xF5, 0x59, 0xCB, 0x5F, 0xB0,
    0x9C, 0xA9, 0x51, 0xA0, 0x7F, 0x0C, 0xF6, 0x6F, 0x17, 0xC4, 0x49, 0xEC,
    0xD8, 0x43, 0x1F, 0x2D, 0xA4, 0x76, 0x7B, 0xB7, 0xCC, 0xBB, 0x3E, 0x5A,
    0xFB, 0x60, 0xB1, 0x86, 0x3B, 0x52, 0xA1, 0x6C, 0xAA, 0x55, 0x29, 0x9D,
    0x97, 0xB2, 0x87, 0x90, 0x61, 0xBE, 0xDC, 0xFC, 0xBC, 0x95, 0xCF, 0xCD,
    0x37, 0x3F, 0x5B, 0xD1, 0x53, 0x39, 0x84, 0x3C, 0x41, 0xA2, 0x6D, 0x47,
    0x14, 0x2A, 0x9E, 0x5D, 0x56, 0xF2, 0xD3, 0xAB, 0x44, 0x11, 0x92, 0xD9,
    0x23, 0x20, 0x2E, 0x89, 0xB4, 0x7C, 0xB8, 0x26, 0x77, 0x99, 0xE3, 0xA5,
    0x67, 0x4A, 0xED, 0xDE, 0xC5, 0x31, 0xFE, 0x18, 0x0D, 0x63, 0x8C, 0x80,
    0xC0, 0xF7, 0x70, 0x07};

static struct option long_options[] = {
    {"keysize", required_argument, 0, 'k'},
    {"keyfile", required_argument, 0, 'f'},
    {"inputfile", required_argument, 0, 'i'},
    {"outputfile", required_argument, 0, 'o'},
    {"mode", required_argument, 0, 'm'},
    {0, 0, 0, 0}};

int keysize;
string keyfile;
string inputfile;
string outputfile;
int mode;

/**
 * This function parses the command line and stores useful information
 **/
void parseCommandLine(int argc, char **argv) {
  int c;
  while (1) {
    c = getopt_long(argc, argv, "k:f:i:o:m:", long_options, NULL);

    /* Detect the end of the options. */
    if (c == -1)
      break;

    switch (c) {
    case 'k':
      keysize = stoi(optarg);
      break;

    case 'f':
      keyfile = optarg;
      break;

    case 'i':
      inputfile = optarg;
      break;

    case 'o':
      outputfile = optarg;
      break;

    case 'm':
      mode = stoi(optarg);
      break;

    case '?':
      /* getopt_long already printed an error message. */
      break;

    default:
      abort();
    }
  }
}

/**
 * This function gets the corresponding SBox byte to the given byte 'b'
 **/
int subBytes(unsigned char b) {
  // Simply index into the SBox array to find what the bits should be
  // substituted for
  return Sbox[b];
}

/**
 * This function gets the corresponding ISBox byte to the given byte 'b'
 **/
int subBytesInv(unsigned char b) {
  // Simply index into the SBox array to find what the bits should be
  // substituted for
  return ISbox[b];
}

/**
 * This function rearranges our state by using the matrix instantiated in r[]
 **/
unsigned char *shiftRows(unsigned char *b) {
  unsigned char r[16] = {b[0], b[5],  b[10], b[15], b[4],  b[9], b[14], b[3],
                         b[8], b[13], b[2],  b[7],  b[12], b[1], b[6],  b[11]};
  for (int i = 0; i < 16; ++i)
    b[i] = r[i];
  return b;
}

/**
 * This function is the inverse of shiftRows
 **/
unsigned char *shiftRowsInv(unsigned char *b) {
  unsigned char r[16] = {b[0], b[13], b[10], b[7],  b[4],  b[1], b[14], b[11],
                         b[8], b[5],  b[2],  b[15], b[12], b[9], b[6],  b[3]};
  for (int i = 0; i < 16; ++i)
    b[i] = r[i];
  return b;
}

/**
 * This function transforms the bytes by treating them as four-term polynomials
 * Instead of doing all the calculations I simply have a look up table at the
 *beginning
 * of this file that automates the outcomes of the operations.
 **/
unsigned char *mixColumns(unsigned char *b) {
  for (int i = 0; i < 4; ++i) {
    int x1, x2, x3, x4, l1, l2;
    x1 = b[(i * 4)];
    x2 = b[(i * 4) + 1];
    x3 = b[(i * 4) + 2];
    x4 = b[(i * 4) + 3];

    l1 = Lbox[x1] + Lbox[2];
    l2 = Lbox[x2] + Lbox[3];
    if (l1 > 0xff)
      l1 -= 0xff;
    if (l2 > 0xff)
      l2 -= 0xff;
    if(x1 == 0)
      l1 = 256;
    if(x2 == 0)
      l2 = 256;
    b[(i * 4)] = Ebox[l1] ^ Ebox[l2] ^ (x3) ^ (x4);

    l1 = Lbox[x2] + Lbox[2];
    l2 = Lbox[x3] + Lbox[3];
    if (l1 > 0xff)
      l1 -= 0xff;
    if (l2 > 0xff)
      l2 -= 0xff;
    if(x2 == 0)
      l1 = 256;
    if(x3 == 0)
      l2 = 256;
    b[(i * 4) + 1] = (x1) ^ Ebox[l1] ^ Ebox[l2] ^ (x4);

    l1 = Lbox[x3] + Lbox[2];
    l2 = Lbox[x4] + Lbox[3];
    if (l1 > 0xff)
      l1 -= 0xff;
    if (l2 > 0xff)
      l2 -= 0xff;
    if(x3 == 0)
      l1 = 256;
    if(x4 == 0)
      l2 = 256;
    b[(i * 4) + 2] = (x1) ^ (x2) ^ Ebox[l1] ^ Ebox[l2];

    l1 = Lbox[x4] + Lbox[2];
    l2 = Lbox[x1] + Lbox[3];
    if (l1 > 0xff)
      l1 -= 0xff;
    if (l2 > 0xff)
      l2 -= 0xff;
    if(x4 == 0)
      l1 = 256;
    if(x1 == 0)
      l2 = 256;
    b[(i * 4) + 3] = Ebox[l2] ^ (x2) ^ (x3) ^ Ebox[l1];
  }
  return b;
}

/**
 * This function is the inverse of mixColumns
 **/
unsigned char *mixColumnsInv(unsigned char *b) {
  for (int i = 0; i < 4; ++i) {
    int x1, x2, x3, x4, l1, l2, l3, l4;
    x1 = b[(i * 4)];
    x2 = b[(i * 4) + 1];
    x3 = b[(i * 4) + 2];
    x4 = b[(i * 4) + 3];

    l1 = Lbox[x1] + Lbox[0x0e];
    l2 = Lbox[x2] + Lbox[0x0b];
    l3 = Lbox[x3] + Lbox[0x0d];
    l4 = Lbox[x4] + Lbox[0x09];
    if (l1 > 0xff)
      l1 -= 0xff;
    if (l2 > 0xff)
      l2 -= 0xff;
    if (l3 > 0xff)
      l3 -= 0xff;
    if (l4 > 0xff)
      l4 -= 0xff;
    if(x1 == 0)
      l1 = 256;
    if(x2 == 0)
      l2 = 256;
    if(x3 == 0)
      l3 = 256;
    if(x4 == 0)
      l4 = 256;
    b[(i * 4)] = Ebox[l1] ^ Ebox[l2] ^ Ebox[l3] ^ Ebox[l4];

    l1 = Lbox[x1] + Lbox[0x09];
    l2 = Lbox[x2] + Lbox[0x0e];
    l3 = Lbox[x3] + Lbox[0x0b];
    l4 = Lbox[x4] + Lbox[0x0d];
    if (l1 > 0xff)
      l1 -= 0xff;
    if (l2 > 0xff)
      l2 -= 0xff;
    if (l3 > 0xff)
      l3 -= 0xff;
    if (l4 > 0xff)
      l4 -= 0xff;
    if(x1 == 0)
      l1 = 256;
    if(x2 == 0)
      l2 = 256;
    if(x3 == 0)
      l3 = 256;
    if(x4 == 0)
      l4 = 256;
    b[(i * 4) + 1] = Ebox[l1] ^ Ebox[l2] ^ Ebox[l3] ^ Ebox[l4];

    l1 = Lbox[x1] + Lbox[0x0d];
    l2 = Lbox[x2] + Lbox[0x09];
    l3 = Lbox[x3] + Lbox[0x0e];
    l4 = Lbox[x4] + Lbox[0x0b];
    if (l1 > 0xff)
      l1 -= 0xff;
    if (l2 > 0xff)
      l2 -= 0xff;
    if (l3 > 0xff)
      l3 -= 0xff;
    if (l4 > 0xff)
      l4 -= 0xff;
    if(x1 == 0)
      l1 = 256;
    if(x2 == 0)
      l2 = 256;
    if(x3 == 0)
      l3 = 256;
    if(x4 == 0)
      l4 = 256;
    b[(i * 4) + 2] = Ebox[l1] ^ Ebox[l2] ^ Ebox[l3] ^ Ebox[l4];

    l1 = Lbox[x1] + Lbox[0x0b];
    l2 = Lbox[x2] + Lbox[0x0d];
    l3 = Lbox[x3] + Lbox[0x09];
    l4 = Lbox[x4] + Lbox[0x0e];
    if (l1 > 0xff)
      l1 -= 0xff;
    if (l2 > 0xff)
      l2 -= 0xff;
    if (l3 > 0xff)
      l3 -= 0xff;
    if (l4 > 0xff)
      l4 -= 0xff;
    if(x1 == 0)
      l1 = 256;
    if(x2 == 0)
      l2 = 256;
    if(x3 == 0)
      l3 = 256;
    if(x4 == 0)
      l4 = 256;
    b[(i * 4) + 3] = Ebox[l1] ^ Ebox[l2] ^ Ebox[l3] ^ Ebox[l4];
  }
  return b;
}

/**
 * This function XOR's our state with a section of our expanded key, determined
 * by the round we are currently on.
 **/
unsigned char *addRoundkey(unsigned char *state, unsigned char *expandedkey,
                           int offset) {
  for (int i = 0; i < 16; ++i)
    state[i] = state[i] ^ expandedkey[offset + i];
  return state;
}

/**
 * This function uses the SBox lookup to replace each byte in the word with its
 * equivalent substitution
 **/
unsigned char *subWord(unsigned char *b) {
  for (int i = 0; i < 4; ++i)
    b[i] = subBytes(b[i]);
  return b;
}

/**
 * This function simply shifts the bytes in the word to the left and sets the
 *last byte
 * to the old first byte
 **/
unsigned char *rotWord(unsigned char *b) {
  unsigned char c = b[0];
  b[0] = b[1];
  b[1] = b[2];
  b[2] = b[3];
  b[3] = c;
  return b;
}

/**
 * This function calculates the Round Constant word
 **/
unsigned char *getRconValue(unsigned char *Rcon, int round) {
  // round = (round / (keysize / 32)) - 1;
  Rcon[0] = (0x01 << round);
  Rcon[1] = 0;
  Rcon[2] = 0;
  Rcon[3] = 0;
  switch (round) {
  case 8:
    Rcon[0] = 0x1b;
    break;
  case 9:
    Rcon[0] = 0x36;
    break;
  case 10:
    Rcon[0] = 0x6c;
    break;
  case 11:
    Rcon[0] = 0xd8;
    break;
  case 12:
    Rcon[0] = 0xab;
    break;
  case 13:
    Rcon[0] = 0x4d;
    break;
  case 14:
    Rcon[0] = 0x9a;
    break;
  default:
    break;
  }
  return Rcon;
}

/**
 * This function calculates an XOR operation between two words ('a' ^ 'b') and
 *stores it in 'a'
 **/
unsigned char *getXOR(unsigned char *a, unsigned char *b) {
  a[0] = a[0] ^ b[0];
  a[1] = a[1] ^ b[1];
  a[2] = a[2] ^ b[2];
  a[3] = a[3] ^ b[3];
  return a;
}

/**
 * This function simply copies values from a word in 'b' to 'a'
 **/
void copyWord(unsigned char *a, unsigned char *b) {
  a[0] = b[0];
  a[1] = b[1];
  a[2] = b[2];
  a[3] = b[3];
}

/**
 * This function expands our input key into an expanded key that can be used for
 *all rounds
 * of our encryption
 **/
unsigned char *keyExpansion(unsigned char *inputkey,
                            unsigned char *_expandedKey) {

  if (keysize == 128) {
    int rounds = 44; // 44 rounds to expand a 128-bit key to 176 bytes
    int cur_round = 0;

    while (cur_round < 4) {
      _expandedKey[cur_round * 4] = inputkey[cur_round * 4];
      _expandedKey[cur_round * 4 + 1] = inputkey[cur_round * 4 + 1];
      _expandedKey[cur_round * 4 + 2] = inputkey[cur_round * 4 + 2];
      _expandedKey[cur_round * 4 + 3] = inputkey[cur_round * 4 + 3];
      ++cur_round;
    }

    while (cur_round < rounds) {
      unsigned char *Rcon = new unsigned char[4];
      unsigned char *word = new unsigned char[4];

      copyWord(word, &_expandedKey[((cur_round - 1) * 4)]);

      // subWord(rotWord(word-1)) XOR Rcon XOR (word-4)
      getXOR(subWord(rotWord(word)), getRconValue(Rcon, (cur_round / 4) - 1));
      getXOR(word, &_expandedKey[((cur_round - 4) * 4)]);

      copyWord(&_expandedKey[(cur_round * 4)], word);
      ++cur_round;
      for (int subrounds = 0; subrounds < 3; ++subrounds) {
        copyWord(word, &_expandedKey[(cur_round - 1) * 4]);
        getXOR(word, &_expandedKey[(cur_round - 4) * 4]);
        copyWord(&_expandedKey[cur_round * 4], word);
        ++cur_round;
      }
      delete[] Rcon;
      delete[] word;
    }
  }else{
    int rounds = 60;
    int cur_round = 0;

    while (cur_round < 8) {
      _expandedKey[cur_round * 4] = inputkey[cur_round * 4];
      _expandedKey[cur_round * 4 + 1] = inputkey[cur_round * 4 + 1];
      _expandedKey[cur_round * 4 + 2] = inputkey[cur_round * 4 + 2];
      _expandedKey[cur_round * 4 + 3] = inputkey[cur_round * 4 + 3];
      ++cur_round;
    }

    while (cur_round < rounds) {
      unsigned char *Rcon = new unsigned char[4];
      unsigned char *word = new unsigned char[4];

      copyWord(word, &_expandedKey[((cur_round - 1) * 4)]);

      getXOR(subWord(rotWord(word)), getRconValue(Rcon, (cur_round / 8) - 1));
      getXOR(word, &_expandedKey[((cur_round - 8) * 4)]);

      copyWord(&_expandedKey[(cur_round * 4)], word);
      ++cur_round;
      for (int subrounds = 0; subrounds < 3; ++subrounds) {
        copyWord(word, &_expandedKey[(cur_round - 1) * 4]);
        getXOR(word, &_expandedKey[(cur_round - 8) * 4]);
        copyWord(&_expandedKey[cur_round * 4], word);
        ++cur_round;
      }
      if(cur_round > 59)
        break;
      copyWord(word, &_expandedKey[((cur_round - 1) * 4)]);
      getXOR(subWord(word), &_expandedKey[((cur_round - 8) * 4)]);
      copyWord(&_expandedKey[(cur_round * 4)], word);
      ++cur_round;
      for (int subrounds = 0; subrounds < 3; ++subrounds) {
        copyWord(word, &_expandedKey[(cur_round - 1) * 4]);
        getXOR(word, &_expandedKey[(cur_round - 8) * 4]);
        copyWord(&_expandedKey[cur_round * 4], word);
        ++cur_round;
      }

      delete[] Rcon;
      delete[] word;
    }
  }
  return _expandedKey;
}

int main(int argc, char **argv) {

  parseCommandLine(argc, argv);

  unsigned char *inputKey = new unsigned char[keysize / 8];
  unsigned char *expandedKey;
  int cur_round = 0;
  int total_rounds = 0;

  // Read bytes from keyfile
  ifstream kfile(keyfile, ios::in | ios::binary | ios::ate);
  if (kfile.is_open()) {
    unsigned char *memblock;
    memblock = new unsigned char[(keysize / 8)];
    kfile.seekg(0, ios::beg);
    kfile.read((char *)(&memblock[0]), (keysize / 8));
    for (int l = 0; l < (keysize / 8); ++l)
      inputKey[l] = memblock[l];
    kfile.close();
    delete[] memblock;
  } else
    cout << "Unable to open keyfile";

  if (keysize == 128){
    expandedKey = new unsigned char[176];
    total_rounds = 10;
  }else{
    expandedKey = new unsigned char[240];
    total_rounds = 14;
  }
  expandedKey = keyExpansion(inputKey, expandedKey);

  // Read bytes from input file
  ifstream file(inputfile, ios::in | ios::binary | ios::ate);
  if (file.is_open()) {
    unsigned char *memblock;
    streampos size;
    size = file.tellg(); // Equals the total size of file
    memblock = new unsigned char[16];
    file.seekg(0, ios::beg);

    // Read only the first 16 bytes
    file.read((char *)(&memblock[0]), 16);

    // Pad with 0's
    if (file.gcount() < 16) {
      for (int x = file.gcount(); x < 16; ++x)
        if (x == 15)
          memblock[x] = 16 - file.gcount(); // Set the last byte equal to the
                                            // number of zeroes we used
        else
          memblock[x] = 0;
    }
    ofstream outputstrm;
    outputstrm.open(outputfile);
    for (int i = 0; i < size; i += 16) {
      // (mode == 1) is Encrypt
      if (mode == 1) {
        // Before we begin encrypting we do one addRoundkey
        addRoundkey(memblock, expandedKey, 0);

        // Beginning to encrypt 16 bytes
        for (; cur_round < (total_rounds - 1); cur_round++) {
          for (int n = 0; n < 16; ++n)
            memblock[n] = subBytes(memblock[n]);
          memblock = shiftRows(memblock);
          memblock = mixColumns(memblock);
          memblock = addRoundkey(memblock, expandedKey, (cur_round + 1) * 16);
        }
        for (int n = 0; n < 16; ++n)
          memblock[n] = subBytes(memblock[n]);
        memblock = shiftRows(memblock);
        addRoundkey(memblock, expandedKey, (cur_round + 1) * 16);
        // End of Encryption
      } else {
        cur_round = total_rounds;

        addRoundkey(memblock, expandedKey, cur_round * 16);
        --cur_round;

        // Beginning to decrypt 16 bytes
        for (; cur_round > 0; cur_round--) {
          memblock = shiftRowsInv(memblock);
          for (int n = 0; n < 16; ++n)
            memblock[n] = subBytesInv(memblock[n]);
          memblock = addRoundkey(memblock, expandedKey, cur_round * 16);
          memblock = mixColumnsInv(memblock);
        }
        memblock = shiftRowsInv(memblock);
        for (int n = 0; n < 16; ++n)
          memblock[n] = subBytesInv(memblock[n]);
        addRoundkey(memblock, expandedKey, 0);
        // End of Decryption
      }


      for (int n = 0; n < 16; ++n)
        outputstrm << memblock[n];

      file.read((char *)(&memblock[0]), 16);
    }

    file.close();
    delete[] memblock;
  } else
    cout << "Unable to open file";

  return 0;
}